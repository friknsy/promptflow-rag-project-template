id: template_chat_flow
name: Template Chat Flow
environment:
  python_requirements_txt: requirements.txt
inputs:
  chat_history:
    type: list
    default: []
    is_chat_input: false
    is_chat_history: true
  query:
    type: string
    default: " What is the growth rate of Azure ML revenue in FY23Q1?"
    is_chat_input: true
    is_chat_history: false
  topK:
    type: int
    default: 5
    is_chat_history: false
    is_chat_input: false
  maxTokens:
    type: int
    default: 3500
    is_chat_history: false
    is_chat_input: false
  searchType:
    type: string
    default: filter_vector
    is_chat_history: false
    is_chat_input: false
  fetched_docs:
    type: object
    default: {}
    is_chat_history: false
  already_retrieved:
    type: bool
    default: false
    is_chat_history: false
outputs:
  reply:
    type: string
    reference: ${GenerateResult.output}
    is_chat_output: true
  fetched_docs:
    type: string
    reference: ${FormatRetrievedDocuments.output}
  log_params:
    type: string
    reference: ${LogParam.output}
  already_retrieved:
    type: string
    reference: ${KeepContext.output}
nodes:
- name: QueryParser
  type: python
  source:
    type: code
    path: QueryParser.py
  inputs:
    query: ${inputs.query}
    conversation: ${inputs.chat_history}
  aggregation: false
  activate:
    when: ${inputs.already_retrieved}
    is: false
- name: RetrieveDocumentsACS
  type: python
  source:
    type: code
    path: RetrieveDocumentsACS.py
  inputs:
    searchConnection: acs_connection
    embeddingModelConnection: aoai_connection
    embeddingModelName: text-embedding-ada-002
    queries: ${inputs.query}
    indexName: msft-transcripts-1
    vectorColName: Embedding
    filterCol: ${QueryParser.output}
    topK: ${inputs.topK}
    searchType: ${inputs.searchType}
  aggregation: false
  activate:
    when: ${inputs.already_retrieved}
    is: false
- name: FormatRetrievedDocuments
  type: python
  source:
    type: code
    path: FormatRetrievedDocuments.py
  inputs:
    docs: ${RetrieveDocumentsACS.output}
    maxTokens: ${inputs.maxTokens}
  use_variants: false
  activate:
    when: ${inputs.already_retrieved}
    is: false
- name: FormatConversation
  type: python
  source:
    type: code
    path: FormatConversation.py
  inputs:
    history: ${inputs.chat_history}
    maxTokens: 800
  use_variants: false
- name: DetermineReply
  type: llm
  source:
    type: code
    path: DetermineReply.jinja2
  inputs:
    deployment_name: gpt-35-turbo
    temperature: 0
    top_p: 1
    max_tokens: 800
    presence_penalty: 0
    frequency_penalty: 0
    conversation: ${FormatConversation.output}
    documentation: ${FormatRetrievedDocuments.output}
    user_query: ${inputs.query}
  connection: aoai_connection
  api: chat
  use_variants: false
  activate:
    when: ${inputs.already_retrieved}
    is: "false"
- name: FormatReply
  type: python
  source:
    type: code
    path: FormatReply.py
  inputs:
    reply: ${DetermineReply.output}
  use_variants: false
  activate:
    when: ${inputs.already_retrieved}
    is: "false"
- name: KeepContext
  type: python
  source:
    type: code
    path: KeepContext.py
  inputs:
    retrieved_docs: ${FormatRetrievedDocuments.output}
  activate:
    when: ${inputs.already_retrieved}
    is: false
- name: ContinueReply
  type: llm
  source:
    type: code
    path: ContinueReply.jinja2
  inputs:
    deployment_name: gpt-35-turbo
    conversation: ${FormatConversation.output}
    context: ${inputs.fetched_docs}
    user_query: ${inputs.query}
  connection: aoai_connection
  api: chat
  activate:
    when: ${inputs.already_retrieved}
    is: true
- name: GenerateResult
  type: python
  source:
    type: code
    path: GenerateResult.py
  inputs:
    determine_reply: ${FormatReply.output}
    continue_reply: ${ContinueReply.output}
